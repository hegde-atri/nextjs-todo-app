#+title: Session2
#+author: Atri Hegde

* Preface
I found that its much better if we work on all of the backend at once, then all of the frontend during our sessions.

* Table of Contents :TOC:
- [[#preface][Preface]]
- [[#update-prisma-schema][Update Prisma Schema]]
- [[#crud][CRUD]]

* Update Prisma Schema
lets add a field such as status/done which is boolean to our todo object in prisma.

#+begin_quote
I have name the field =done=.
#+end_quote

* CRUD
Let's create the create, update and delete methods for our todo in our backend now.
#+begin_src typescript
export const todoRouter = createTRPCRouter({
  create: protectedProcedure
    .input(
      z.object({
        content: z.string().min(1),
        state: z.number().max(1).min(0).default(0),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      return ctx.db.todo.create({
        data: {
          content: input.content,
          done: false,
          createdBy: { connect: { id: ctx.session.user.id } },
        },
      });
    }),

  getAll: publicProcedure.query(async ({ ctx }) => {
    const todos = await ctx.db.todo.findMany({
      take: 100,
      orderBy: [{ done: "asc" }, { createdAt: "desc" }],
    });
    return todos;
  }),

  updateDoneStatus: protectedProcedure
    .input(
      z.object({
        todoId: z.number(),
        done: z.boolean(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const { todoId, done } = input;
      const updatedTodo = await ctx.db.todo.update({
        where: { id: todoId },
        data: {
          done,
        },
      });

      return updatedTodo;
    }),

  deleteTodo: protectedProcedure
    .input(
      z.object({
        todoId: z.number(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      await ctx.db.todo.delete({
        where: { id: input.todoId },
      });
    }),
});
#+end_src

Lets also list todo items. I created a component for this

#+begin_src typescript
const Todo = (props: { todo: Todo; authenticated: boolean }) => {
  const { mutate: updateStatus, isLoading: isStatusUpdating } =
    api.todo.updateDoneStatus.useMutation({
      onSuccess: () => {
        props.todo.done = !props.todo.done;
      },
    });

  const { mutate: deleteTodo, isLoading: isDeleting } =
    api.todo.deleteTodo.useMutation({
      onSuccess: () => {
        props.todo.id = undefined!;
      },
    });

  if (props.todo.id == undefined) {
    return;
  }

  return (
    <div
      key={props.todo.id}
      className="flex flex-row justify-between border-b border-slate-400 p-2"
    >
      <div>
        <h2 className="text-2xl font-bold">{props.todo.content}</h2>
        <p>
          <span>Status: </span>
          {props.todo.done ? "Done" : "Pending"}
        </p>
      </div>
      {props.authenticated ? (
        <div className="flex justify-center text-slate-100">
          {props.todo.done ? (
            <button
              className="rounded-md bg-orange-800 p-2"
              onClick={() =>
                updateStatus({ todoId: props.todo.id, done: false })
              }
            >
              {isStatusUpdating ? <LoadingSpinner /> : "Undo"}
            </button>
          ) : (
            <button
              className="items-center rounded-md bg-green-900 p-2"
              onClick={() =>
                updateStatus({ todoId: props.todo.id, done: true })
              }
            >
              {isStatusUpdating ? <LoadingSpinner /> : "Done"}
            </button>
          )}
          <button
            className="ml-2 rounded-md bg-red-900 p-2"
            onClick={() => deleteTodo({ todoId: props.todo.id })}
          >
            {isDeleting ? <LoadingSpinner /> : "Delete"}
          </button>
        </div>
      ) : null}
    </div>
  );
};
#+end_src

Then I use it in Home.

#+begin_src typescript
export default function Home() {
  const session = useSession();
  const { data, isLoading } = api.todo.getAll.useQuery();

  return (
    <div className="">
      <Header />
      {isLoading ? (
        <div className="mx-auto flex">
          <LoadingPage />
        </div>
      ) : (
        data!.map((item) => {
          return <Todo todo={item} authenticated={!!session.data?.user} />;
        })
      )}
    </div>
  );
}
#+end_src

I also updated my header to have the ability to add a post.

#+begin_src typescript
"use client";
import { signIn, signOut, useSession } from "next-auth/react";
import { LoadingSpinner } from "./LoadingSpinner";
import { useState } from "react";
import { api } from "~/trpc/react";

export const Header = () => {
  let { data: session } = useSession();
  let [todo, setTodo] = useState("");
  const utils = api.useUtils();

  const { mutate, isLoading } = api.todo.create.useMutation({
    onSuccess: () => {
      setTodo("");
      void utils.todo.getAll.invalidate();
    },
  });

  if (!session?.user) {
    return (
      <div className="flex justify-end border-b border-slate-400 p-2">
        <button
          className="rounded-md bg-slate-900 p-2 text-slate-200"
          onClick={() => signIn("google")}
        >
          Login
        </button>
      </div>
    );
  }

  return (
    <div className="flex justify-center border-b border-slate-400 p-2">
      <button onClick={() => signOut()}>
        <img
          className="rounded-full"
          src={session?.user.image!}
          height={65}
          width={65}
        />
      </button>
      <input
        className="grow bg-transparent p-4 px-12 outline-none"
        value={todo}
        placeholder="Task"
        disabled={isLoading}
        onChange={(e) => setTodo(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (todo !== "") {
              mutate({ content: todo });
            }
          }
        }}
      />
      {isLoading ? (
        <div>
          <LoadingSpinner size={20} />
        </div>
      ) : (
        <button className="p-2 text-3xl text-slate-300">+</button>
      )}
    </div>
  );
};
#+end_src
